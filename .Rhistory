message("Agafo dades de la catxé interna")
return(matriu)
}
#if the value has not been computed, get the matrix from the object
matrix<-x$get()
#call the solve funtion with the matrix
matriu<-solve(matrix, ...)
#cache the value, for the next time it's called
x$setmatrix(matriu)
#returns the computed value
matriu
}
cacheSolve(meva_matriu)
cacheSolve <- function(x, ...) {
inv <- x$getinv()
# If the inverse is already calculated, return it
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
# The inverse is not yet calculated, so we calculate it
data <- x$get()
inv <- solve(data, ...)
# Cache the inverse
x$setinv(inv)
# Return it
inv
}
cacheSolve(meva_matriu)
cacheSolve <- function(x=matrix(), ...) {
inversa <- x$getmatrix()
# If the inverse is already calculated, return it
if (!is.null(inversa)) {
message("getting cached data")
return(inversa)
}
# The inverse is not yet calculated, so we calculate it
matriu <- x$get()
inversa <- solve(matriu, ...)
# Cache the inverse
x$setinv(inversa)
# Return it
inversa
}
cacheSolve(meva_matriu)
meva_matriu<-makeCacheMatrix(matrix(16:59,3,3))
meva_matriu
cacheSolve(meva_matriu)
meva_matriu<-makeCacheMatrix(matrix(11:20,3,3))
cacheSolve(meva_matriu)
meva_matriu<-makeCacheMatrix(matrix(12:20,3,3))
cacheSolve(meva_matriu)
meva_matriu<-makeCacheMatrix(matrix(11:19,3,3))
cacheSolve(meva_matriu)
meva_matriu<-makeCacheMatrix(matrix(5,4,5,4,2,7,6,5,1,3,3))
cacheSolve(meva_matriu)
meva_matriu<-makeCacheMatrix(matrix(c(5,4,5,4,2,7,6,5,1),3,3))
cacheSolve(meva_matriu)
meva_matriu<-makeCacheMatrix(matrix(c(3,4,5,7),2,2))
cacheSolve(meva_matriu)
cacheSolve <- function(x, ...) {
inversa <- x$getmatrix()
# If the inverse is already calculated, return it
if (!is.null(inversa)) {
message("getting cached data")
return(inversa)
}
# The inverse is not yet calculated, so we calculate it
matriu <- x$get()
inversa <- solve(matriu, ...)
# Cache the inverse
x$setinv(inversa)
# Return it
inversa
}
cacheSolve(meva_matriu)
makeCacheMatrix <- function(x = matrix()) {
# inversa will store the cached inverse matrix
# it's reset to NULL every time makeCacheMatrix is called
inversa <- NULL
# set method for the matrix
set <- function(y) {
x <<- y
inversa <<- NULL
}
# ger method for the matrix
get <- function() x
# Setter for the inverse
setinv <- function(finv) inversa <<- finv
# Getter for the inverse
getinv <- function() inversa
# Return the matrix with our newly defined functions
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
cacheSolve <- function(x, ...) {
inv <- x$getinv()
# If the inverse is already calculated, return it
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
# The inverse is not yet calculated, so we calculate it
data <- x$get()
inv <- solve(data, ...)
# Cache the inverse
x$setinv(inv)
# Return it
inv
}
meva_matriu<-makeCacheMatrix(matrix(c(3,4,5,7),2,2))
cacheSolve(meva_matriu)
#This function creates a special "matrix" object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
# inversa will store the cached inverse matrix
# it's reset to NULL every time makeCacheMatrix is called
inversa <- NULL
# this function stores the value to the matrix in the object
# and reset to NULL the internal matrix
set <- function(y) {
x <<- y
inversa <<- NULL
}
# get method for the matrix
get <- function() x
# this is called by cachesolve() during the first cachesolve()
# access and it will store the value using superassignment
setinv <- function(finv) inversa <<- finv
# this will store the cached value on next accesses
getinv <- function() inversa
# this list is returned with the newly created object
# It lists all the "methods" that are part of the object
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
# This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
# If the inverse has already been calculated (and the matrix has not changed),
# then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
inversa <- x$getinv()
# Check if the inverse has been already calculated, if so return the value
if (!is.null(inv)) {
message("Dades extretes de la catxé")
return(inv)
}
# if reached this point, the inversa has not been calculated. call Solve!
data <- x$get()
inv <- solve(data, ...)
# Store the inverse for future use
x$setinv(inv)
inv
}
meva_matriu<-makeCacheMatrix(matrix(c(3,4,5,7),2,2))
cacheSolve(meva_matriu)
# This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
# If the inverse has already been calculated (and the matrix has not changed),
# then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
inversa <- x$getinv()
# Check if the inverse has been already calculated, if so return the value
if (!is.null(inversa)) {
message("Dades extretes de la catxé")
return(inversa)
}
# if reached this point, the inversa has not been calculated. call Solve!
data <- x$get()
inversa <- solve(data, ...)
# Store the inverse for future use
x$setinv(inversa)
inversa
}
cacheSolve(meva_matriu)
install.packages("twitteR")
install.packager("twitteR")
install.packages("twitteR")
install.packages("ROAuth")
library("twitteR")
library("ROAuth")
?ROAuth
?twitterR
?twitteR
?rjson
install.packages("data.table")
big_df <-data.frame(x=rnorm(1e6),rnorm(1e6))
file <- tempfile()
write.table(big_df,file=file,row.names=FALSE,col.names=TRUE,sep="\t",quote=FALSE)
system.time(fread(file))
library(data.table)
system.time(fread(file))
system.time(fread(file))
syste.time(read.table(file,header=TRUE,sep="\t"))
system.time(read.table(file,header=TRUE,sep="\t"))
system.time(fread(file))
swril()
swirl()
library("swirl")
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
swirl()
library(dplyr)
cran<-tbl_df(mydf)
rm(mydf)
rm("mydf")
cran
?grup_by()
help
?group_by
by_package<-group_by(cran,package)
by_package
summarize(by_package,mean(size))
submit()
submit()
pack_sum
quantile(pack$count, probs=0.99)
quantile(pack_sum$count, probs=0.99)
top_counts=filter(pack_sum,count>679)
top_counts<-filter(pack_sum,count>679)
top_counts
head(top_counts,20)
?arrange
arrange(top_counts,count)
arrange(top_counts,desc(count)
)
quantile(pack_sum$unique,probs=.99)
filter(pack_sum,unique>464)
filter(pack_sum,unique>465)
top_unique<-filter(pack_sum,unique>465)
top_unique
arrange(top_unique,desc(unique))
?n
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
setwd("C:/Users/ccorretg/Dropbox/science/Getting and cleaning data")
al_url<-"./data/activity_labels.txt"
f_url<-"./data/features.txt"
st_url<-"./data/test/subject_test.txt"
at_url <- "./data/test/y_test.txt"
mt_url <-"./data/test/X_test.txt"
al <- read.table(al_url, header=FALSE, col.names=c("activity_id","activity_label"))
ml <- read.table(f_url, header=FALSE, col.names=c("subject_id","label"))
al
ml
st <- read.table(st_url,header = FALSE, col.names=c("subject_id"))
st
?read.table
st <- read.table(st_url, col.names=c("subject_id"))
st
head(st)
st <- read.table(st_url, ,header=FALSE, col.names=c("subject_id"))
head(st)
library(dplyr)
setwd("C:/Users/ccorretg/Dropbox/science/Getting and cleaning data")
al_url <-"./data/activity_labels.txt"
f_url  <-"./data/features.txt"
st_url <-"./data/test/subject_test.txt"
at_url <-"./data/test/y_test.txt"
mt_url <-"./data/test/X_test.txt"
stra_url <-"./data/train/subject_train.txt"
atra_url <-"./data/train/y_train.txt"
mtra_url <-"./data/train/X_train.txt"
# Load description labels from files
# al Activity Labels
# ml Measurement Labels
al <- read.table(al_url, col.names=c("activity_id","activity_label"))
ml <- read.table(f_url, col.names=c("subject_id","label"))
# Load Test data
# st Subject Test
# at Activity Train
# mt Measurement Train
st <- read.table(st_url, col.names=c("subject_id"))
at <- read.table(at_url, col.names=c("activity_id"))
mt <- read.table(mt_ur)
# Load Training Data
# stra Subject Training
# atra Activity Training
# mtra Measurements Training
stra <- read.table(stra_url,col.names=c("subject_id"))
atra <- read.table(atra_url,col.names=c("activity_id"))
mtra <- read.table(mtra_url)
library(dplyr)
setwd("C:/Users/ccorretg/Dropbox/science/Getting and cleaning data")
al_url <-"./data/activity_labels.txt"
f_url  <-"./data/features.txt"
st_url <-"./data/test/subject_test.txt"
at_url <-"./data/test/y_test.txt"
mt_url <-"./data/test/X_test.txt"
stra_url <-"./data/train/subject_train.txt"
atra_url <-"./data/train/y_train.txt"
mtra_url <-"./data/train/X_train.txt"
# Load description labels from files
# al Activity Labels
# ml Measurement Labels
al <- read.table(al_url, col.names=c("activity_id","activity_label"))
ml <- read.table(f_url, col.names=c("subject_id","label"))
# Load Test data
# st Subject Test
# at Activity Train
# mt Measurement Train
st <- read.table(st_url, col.names=c("subject_id"))
at <- read.table(at_url, col.names=c("activity_id"))
mt <- read.table(mt_url)
# Load Training Data
# stra Subject Training
# atra Activity Training
# mtra Measurements Training
stra <- read.table(stra_url,col.names=c("subject_id"))
atra <- read.table(atra_url,col.names=c("activity_id"))
mtra <- read.table(mtra_url)
?gsub
ml
head(ml)
str(ml)
head(ml)
ml$label
cml <- gsub("BodyBody","Body",ml$label)
cml
mt
head(mt)
head(2,mt)
head(mt,2)
names(ml
)
names(mt)
str(mt)
str(ml)
names(mt) <- ml$labels
names(mt)
ml$labels
ml
names(mt) <- ml$label
names(mt)
training <- cbind(stra,atra,mtra)
stra
atra
mtra
training
st
at
mt
test <- cbind(st,at,mt)
netdata <-rbind(cbind(stra,atra,mtra), cbind(st,at,mt))
rbind(training,test)
names(test)
names(training)
names(mtra) <- ml$label
netdata <-rbind(cbind(stra,atra,mtra), cbind(st,at,mt))
#### Necessary Library
if(!require(dplyr)){
install.packages("dplyr")
library(dplyr)
}
#### Download and Unzip Raw Dataset
dataURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
path <- basename(dataURL)
if(!file.exists(path)){
download.file(dataURL, path)
}
unzip(path)
#### Load Relevant Dataframe
# Read features table and sanitize their names
features <- read.table("UCI HAR Dataset/features.txt",
col.names = c("colIndex", "colName"),
colClasses = c("integer", "character"),
stringsAsFactors = FALSE)
# Convert to valid column names
# Replace multiple dots with single dot
# Trim trailing dot
features$colName <- features$colName %>%
make.names %>%
gsub("\\.+", ".", .) %>%
gsub("\\.$", "", .)
# Read activity table and convert it to a named vector
activities <- read.table("UCI HAR Dataset/activity_labels.txt",
col.names = c("activityCode", "activityName"),
colClasses = c("integer", "character"),
stringsAsFactors = FALSE)
activities <- structure(activities$activityName, names=activities$activityCode)
#' Read a training/test data.frame
#' @param type "train" or "test"
#' @param root path to "UCI HAR Dataset"
readDF <- function(type = c("train", "test"), root = "UCI HAR Dataset"){
type = match.arg(type)
getPath <- function(x) paste0(root, "/", type, "/", x, "_", type, ".txt")
XDF <- read.table(getPath("X"), col.names = features$colName, colClasses = "numeric")
# Subsitute activity names
activity <- activities[readLines(getPath("Y"))]
subject <- as.integer(readLines(getPath("subject")))
data.frame(XDF, activity, subject, type=type,
check.names = FALSE, stringsAsFactors = FALSE)
}
testDF <- readDF("test")
trainDF <- readDF("train")
mergedDF <- rbind_list(testDF, trainDF)
View(netdata)
view(mergedDF)
View(mergedDF)
arrange(netdata,activity_id)
netdata_o<-arrange(netdata,activity_id)
head(netdata_o)
View(netdata_o)
View(netdata_o)
data_agg <- netdata %>%
group_by(subject_id, activity_id) %>%
summarise_each(funs(mean))
View(data_agg)
View(data_agg)
?summarize_each
?group_by
al
ml
ml$label
mt
agregat <- netdata %>%
group_by(subject_id, activity_id) %>%
summarise_each(funs(mean))
View(agregat)
View(agregat)
dades1<-select(netdata,subject_id, activity_id, contains("mean\\(\\)"), contains("std\\(\\)"))
dades2<-select(agregat,subject_id, activity_id, contains("mean\\(\\)"), contains("std\\(\\)"))
View(dades2)
View(dades2)
dades3<-inner_join(dades2,al,by="activity_id")
View(dades3)
View(dades3)
al
inner_join(activity_labels,by="activity_id")
inner_join(dades2,activity_labels,by="activity_id")
inner_join(dades2,al,by="activity_id")
dades3<-inner_join(dades2,al,by="activity_id")
View(dades3)
View(dades3)
?inner_join
dades3<-inner_join(netdata,al,by="activity_id")
View(dades3)
View(dades3)
ml
al
dades3<-inner_join(al,netdata,by="activity_id")
View(dades3)
View(dades3)
dades3<-inner_join(al,dades2,by="activity_id")
View(dades3)
View(dades3)
View(dades2)
View(dades2)
View(dades3)
View(dades3)
hola <- netdata %>%
select(subject_id, activity_id, contains("mean\\(\\)"), contains("std\\(\\)")) %>%
inner_join(al,by="activity_id") %>%
group_by(subject_id,activity_id,al) %>%
summarise_each(funs(mean)) %>%
hola <- netdata %>%
select(subject_id, activity_id, contains("mean\\(\\)"), contains("std\\(\\)")) %>%
inner_join(al,by="activity_id") %>%
group_by(subject_id,activity_id,activity_label) %>%
summarise_each(funs(mean)) %>%
hola <- netdata %>%
select(subject_id, activity_id, contains("mean\\(\\)"), contains("std\\(\\)")) %>%
inner_join(al,by="activity_id") %>%
group_by(subject_id,activity_id,activity_label) %>%
summarise_each(funs(mean))
View(hola)
View(hola)
hola <- netdata %>%
inner_join(al,by="activity_id") %>%
select(subject_id, activity_id, contains("mean\\(\\)"), contains("std\\(\\)")) %>%
group_by(subject_id,activity_id,activity_label) %>%
summarise_each(funs(mean)) %>%
View(hola)
View(hola)
View(agregat)
hola <- netdata %>%
inner_join(al,by="activity_id") %>%
select(subject_id, activity_label, contains("mean\\(\\)"), contains("std\\(\\)")) %>%
group_by(subject_id,activity_label) %>%
summarise_each(funs(mean))
View(hola)
View(hola)
hola
netdata
head(hola)
hola <- netdata %>%
select(subject_id, activity_label, contains("mean\\(\\)"), contains("std\\(\\)")) %>%
inner_join(al,by="activity_id") %>%
group_by(subject_id,activity_label) %>%
summarise_each(funs(mean)
)
t1 <-inner_join(netdata,al,by="activity_id")
head(t1)
names(t1)
select(t1,subject_id, activity_label, contains("mean\\(\\)"), contains("std\\(\\)"))
t2<-select(t1,subject_id, activity_label, contains("mean\\(\\)"), contains("std\\(\\)"))
head(t2)
names(t2)
head(t2)
hola <- netdata %>%
inner_join(al,by="activity_id") %>%
select(subject_id, activity_label, contains("mean\\(\\)"), contains("std\\(\\)")) %>%
group_by(subject_id,activity_label) %>%
summarise_each(funs(mean))
View(hola)
View(hola)
t3<-group_by(t2,subject_id,activity_label)
View(`t3`)
View(`t3`)
